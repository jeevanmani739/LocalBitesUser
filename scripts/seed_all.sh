#!/usr/bin/env bash
set -euo pipefail

# Prompt for missing env vars
if [ -z "${SUPABASE_URL:-}" ]; then
  read -rp "Enter SUPABASE_URL (e.g. https://<ref>.supabase.co): " SUPABASE_URL
fi

if [ -z "${SERVICE_ROLE_KEY:-}" ]; then
  read -rsp "Enter SERVICE_ROLE_KEY (will not be echoed): " SERVICE_ROLE_KEY
  echo
fi

# Check dependencies
for cmd in curl jq supabase; do
  if ! command -v "$cmd" >/dev/null 2>&1; then
    echo "Missing required command: $cmd. Install it and re-run." >&2
    exit 1
  fi
done

create_user() {
  local email="$1"
  local password="$2"
  local resp
  resp=$(curl -s -X POST "${SUPABASE_URL}/auth/v1/admin/users" \
    -H "apikey: ${SERVICE_ROLE_KEY}" \
    -H "Authorization: Bearer ${SERVICE_ROLE_KEY}" \
    -H "Content-Type: application/json" \
    -d "{\"email\":\"${email}\",\"password\":\"${password}\",\"email_confirm\":true}")
  # Print whole response on error
  id=$(echo "$resp" | jq -r '.id // empty')
  if [ -z "$id" ]; then
    echo "Failed to create user ${email}. Full response:" >&2
    echo "$resp" | jq . >&2
    exit 1
  fi
  echo "$id"
}

echo "Creating 4 users (customer, driver, manager, admin)..."

customer_id=$(create_user "customer@example.com" "TestPassw0rd!")
driver_id=$(create_user "driver@example.com" "TestPassw0rd!")
manager_id=$(create_user "manager@example.com" "TestPassw0rd!")
admin_id=$(create_user "admin@example.com" "TestPassw0rd!")

echo "Created users:"
echo "  customer: $customer_id"
echo "  driver:   $driver_id"
echo "  manager:  $manager_id"
echo "  admin:    $admin_id"

# Write SQL seed file
SQL_FILE="seed_users.sql"
cat > "${SQL_FILE}" <<SQL
-- DO NOT COMMIT this file (contains PII/IDs). Generated by seed_all.sh

-- Customer profile
INSERT INTO public.profiles (id, email, full_name, phone, user_type, is_active, email_verified, phone_verified, created_at)
VALUES (
  '${customer_id}',
  'customer@example.com',
  'Jane Customer',
  '+15555550101',
  'customer',
  true,
  true,
  false,
  now()
);

INSERT INTO public.addresses (id, user_id, label, street_address, city, state, zip_code, is_default, created_at)
VALUES (
  gen_random_uuid(),
  '${customer_id}',
  'Home',
  '123 Example St',
  'Sample City',
  'State',
  '12345',
  true,
  now()
);

-- Driver profile
INSERT INTO public.profiles (id, email, full_name, phone, user_type, is_active, email_verified, phone_verified, created_at)
VALUES (
  '${driver_id}',
  'driver@example.com',
  'Dan Driver',
  '+15555550102',
  'driver',
  true,
  true,
  false,
  now()
);

INSERT INTO public.drivers (id, user_id, vehicle_type, vehicle_make, vehicle_model, vehicle_year, vehicle_number, license_number, is_available, created_at)
VALUES (
  gen_random_uuid(),
  '${driver_id}',
  'car',
  'Toyota',
  'Corolla',
  2020,
  'ABC-1234',
  'LIC-987654',
  true,
  now()
);

-- Restaurant manager profile
INSERT INTO public.profiles (id, email, full_name, phone, user_type, is_active, email_verified, phone_verified, created_at)
VALUES (
  '${manager_id}',
  'manager@example.com',
  'Rita Manager',
  '+15555550103',
  'restaurant_manager',
  true,
  true,
  false,
  now()
);

-- Admin profile
INSERT INTO public.profiles (id, email, full_name, phone, user_type, is_active, email_verified, phone_verified, created_at)
VALUES (
  '${admin_id}',
  'admin@example.com',
  'Alan Admin',
  '+15555550104',
  'admin',
  true,
  true,
  false,
  now()
);
SQL

echo "Wrote SQL -> ${SQL_FILE}"

# Execute SQL via supabase CLI
echo "Executing SQL via supabase CLI (supabase db query)..."
if supabase db query < "${SQL_FILE}"; then
  echo "SQL executed successfully."
else
  echo "supabase db query failed. You can run the file manually with 'supabase db query < ${SQL_FILE}' or paste into SQL editor." >&2
  exit 1
fi

# Validation queries
echo
echo "Validation queries (run in SQL editor or via supabase db query):"
echo "SELECT id, email, user_type FROM public.profiles WHERE email IN ('customer@example.com','driver@example.com','manager@example.com','admin@example.com');"
echo "SELECT * FROM public.addresses WHERE user_id = '${customer_id}';"
echo "SELECT * FROM public.drivers WHERE user_id = '${driver_id}';"

# Clear sensitive var
unset SERVICE_ROLE_KEY
echo
echo "Done. SERVICE_ROLE_KEY unset from shell. Keep the seed_users.sql file private or delete it."