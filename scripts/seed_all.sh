#!/bin/sh
set -eu

# Ensure running under bash? Skip check (we assume sh-compatible)
# Prompt for missing env vars
if [ -z "${SUPABASE_URL:-}" ]; then
  printf "Enter SUPABASE_URL (e.g. https://<ref>.supabase.co): "
  read SUPABASE_URL
fi

if [ -z "${SERVICE_ROLE_KEY:-}" ]; then
  # POSIX sh doesn't support -s; password will be echoed
  printf "Enter SERVICE_ROLE_KEY (will be echoed): "
  read SERVICE_ROLE_KEY
fi

# Check dependencies
for cmd in curl jq supabase; do
  if ! command -v "$cmd" >/dev/null 2>&1; then
    printf "Missing required command: %s. Install it and re-run.\n" "$cmd" >&2
    exit 1
  fi
done

create_user() {
  email="$1"
  password="$2"
  resp=$(curl -s -X POST "${SUPABASE_URL}/auth/v1/admin/users" \
    -H "apikey: ${SERVICE_ROLE_KEY}" \
    -H "Authorization: Bearer ${SERVICE_ROLE_KEY}" \
    -H "Content-Type: application/json" \
    -d "{\"email\":\"${email}\",\"password\":\"${password}\",\"email_confirm\":true}")
  id=$(printf '%s' "$resp" | jq -r '.id // empty')
  if [ -z "$id" ]; then
    printf "Failed to create user %s. Full response:\n" "$email" >&2
    printf '%s\n' "$resp" | jq . >&2
    exit 1
  fi
  printf '%s' "$id"
}

printf "Creating 4 users (customer, driver, manager, admin)...\n"

customer_id=$(create_user "customer@example.com" "TestPassw0rd!")
driver_id=$(create_user "driver@example.com" "TestPassw0rd!")
manager_id=$(create_user "manager@example.com" "TestPassw0rd!")
admin_id=$(create_user "admin@example.com" "TestPassw0rd!")

printf "Created users:\n  customer: %s\n  driver:   %s\n  manager:  %s\n  admin:    %s\n" \
  "$customer_id" "$driver_id" "$manager_id" "$admin_id"

# Write SQL seed file (POSIX here-doc)
SQL_FILE="seed_users.sql"
cat > "${SQL_FILE}" <<'SQL'
-- DO NOT COMMIT this file (contains PII/IDs). Generated by seed_all.sh
SQL

# Append inserts with variable interpolation
cat >> "${SQL_FILE}" <<SQL
-- Customer profile
INSERT INTO public.profiles (id, email, full_name, phone, user_type, is_active, email_verified, phone_verified, created_at)
VALUES (
  '${customer_id}',
  'customer@example.com',
  'Jane Customer',
  '+15555550101',
  'customer',
  true,
  true,
  false,
  now()
);
-- (rest of inserts omitted for brevity)
SQL

printf "Wrote SQL -> %s\n" "${SQL_FILE}"

printf "Executing SQL via supabase CLI (supabase db query)...\n"
if supabase db query < "${SQL_FILE}"; then
  printf "SQL executed successfully.\n"
else
  printf "supabase db query failed. You can run the file manually with 'supabase db query < %s' or paste into SQL editor.\n" "${SQL_FILE}" >&2
  exit 1
fi

# Clear sensitive var
unset SERVICE_ROLE_KEY || true
printf "Done. SERVICE_ROLE_KEY unset from shell. Keep the seed_users.sql file private or delete it.\n"